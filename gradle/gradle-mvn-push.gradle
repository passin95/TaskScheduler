apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

Properties localProperties = new Properties()

try {
    def localFile = project.rootProject.file('local.properties')
    if (localFile != null && localFile.exists()) {
        localProperties.load(localFile.newDataInputStream())
    }
} catch (Exception ignored) {
    println("local.properties not found")
}

def gitUrl = 'https://github.com/passin95/InitKnife.git'   // Git仓库的url
def siteUrl = 'https://github.com/passin95/InitKnife'

version = rootProject.ext.versionName
group = "me.passin"

bintray {
    user = localProperties.getProperty("bintray.user")
    key = localProperties.getProperty("bintray.apikey")
    println("bintray:" + user + " ==> " + key + "  ")

    pkg {
        repo = 'maven'
        name = POM_NAME
        licenses = ["Apache-2.0"]
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        publish = true // 是否是公开项目。

        version {
            name = rootProject.ext.versionName
            desc = POM_DESCRIPTION
            released = new Date()
            vcsTag = 'v' + rootProject.ext.versionName
            attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
        }
    }
    configurations = ['archives']
}
install {
    repositories.mavenInstaller {

        pom {
            project {
                name POM_NAME
                packaging POM_PACKAGING
                description POM_DESCRIPTION
                url siteUrl

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'passin95'        //填写bintray或者github的用户名
                        name 'passin'         //姓名，可以是中文
                        email 'zengbinbinpassin@foxmail.com'
                    }
                }

                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
